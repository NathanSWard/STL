// latch standard header

// Copyright (c) Microsoft Corporation.
// SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception

#pragma once
#ifndef _LATCH_
#define _LATCH_
#include <yvals_core.h>
#if _STL_COMPILER_PREPROCESSOR

#if !_HAS_CXX20
#pragma message("The contents of <latch> are available only with C++20 or later.")
#else // ^^^ !_HAS_CXX20 / _HAS_CXX20 vvv
#include <atomic>
#include <limits>

#pragma pack(push, _CRT_PACKING)
#pragma warning(push, _STL_WARNING_LEVEL)
#pragma warning(disable : _STL_DISABLED_WARNINGS)
_STL_DISABLE_CLANG_WARNINGS
#pragma push_macro("new")
#undef new

_STD_BEGIN

class latch {
public:
    static constexpr ptrdiff_t max() noexcept {
        return numeric_limits<ptrdiff_t>::max();
    }

    constexpr explicit latch(const ptrdiff_t _Expected) : _Status(_Expected) {}

    ~latch() = default;

    latch(const latch&) = delete;
    latch& operator=(const latch&) = delete;

    void count_down(const ptrdiff_t _Update = 1) {
        const auto _Remaining = _Status.fetch_sub(_Update, memory_order_release);
        if (_Remaining == _Update) {
            _Status.notify_all();
        }
    }

    bool try_wait() const noexcept {
        return _Status.load(memory_order_acquire) == 0;
    }

    void wait() const {
        for (;;) {
            auto _Curr_status = _Status.load(memory_order_acquire);
            if (_Curr_status == 0) {
                return;
            }
            _Status.wait(_Curr_status, memory_order_acquire);
        }
    }

    void arrive_and_wait(const ptrdiff_t _Update = 1) {
        count_down(_Update);
        wait();
    }

private:
    atomic<ptrdiff_t> _Status;
};

_STD_END

#pragma pop_macro("new")
_STL_RESTORE_CLANG_WARNINGS
#pragma warning(pop)
#pragma pack(pop)
#endif // _HAS_CXX20
#endif // _STL_COMPILER_PREPROCESSOR
#endif // _LATCH_
